// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x6e\xdb\x3a\x10\xbc\xe7\x2b\xf6\xe9\x22\x1b\x71\xc8\xd8\x46\x1c\xc3\x91\xfc\x50\xa0\x28\x5a\xd4\x28\x7a\x08\x7a\x68\x51\x14\x6b\x73\x5d\x31\x21\x2d\x82\x64\x1d\x29\x82\xfe\xbd\xa0\x28\xb9\xf6\x2d\x37\xed\xec\xcc\x70\x96\x4b\x65\x85\xd7\x6a\x7d\x05\x90\x15\x84\x22\x7c\x00\x64\x5e\x7a\x45\x6b\x8b\xce\x93\x15\x19\x8f\xe5\x55\xec\x29\x79\x78\x06\x4b\x2a\x4f\x9c\xaf\x15\xb9\x82\xc8\x27\x50\x58\xda\xe7\x09\xdf\x39\xc7\x7b\x19\xdb\x39\x97\x00\x5f\x07\xd1\x1b\x95\x8a\x70\xaf\xc8\x0f\xca\xa8\x72\x3b\x2b\x8d\x07\x67\x77\x79\xc2\x9f\xf0\x88\x11\x38\x91\x9f\x5c\xb2\xce\x78\x04\xdf\x26\xb9\x29\xd0\x15\x97\xba\x2e\x64\x2f\x0e\xd9\xc0\xd7\x86\xf2\xc4\x53\xe5\x43\xb2\x24\x1a\x43\xd3\x80\xdc\x03\x7b\x4f\xdb\x3f\xbf\xa1\x6d\x23\xc8\x06\x5b\x2f\x15\x41\x03\xdb\xd2\x0a\xb2\x2b\x10\xe8\x0a\x12\x60\x49\xc0\xd4\x54\xf0\x9f\xd4\xa6\xb4\x1e\x0f\xfe\x01\xda\x93\x1d\x1d\xc4\x60\x94\xf1\xee\xe8\x6e\x17\x7c\x58\x46\x28\xb6\xa5\xa8\xfb\xc9\x84\x3c\x82\x14\x79\xa2\xd1\x84\xf4\x42\x1e\x63\xe3\x7c\xee\x3e\x2b\x1c\xd1\x02\x1a\xf9\xeb\x99\x6a\xc8\x21\x6d\x1a\x60\x5f\xa8\xf2\xaf\x74\x78\xf7\xf5\xd3\x67\xaa\xa1\x6d\xd3\x87\x33\xee\xbe\xb4\x1a\xfd\x40\x7d\x94\x8a\x3e\x44\xa4\xe3\x9d\x11\x35\x1a\xc8\x61\xc3\x34\x9a\x51\xaa\xd1\xa4\x63\xe6\xc8\x7f\x93\xf4\x32\xfa\x31\xbf\x67\x8b\xe9\x7c\x79\xb7\x9c\xc0\xcd\x74\x36\x63\xf3\xfb\xf9\x62\xf1\x73\x02\xd3\xbb\xf1\xf9\x59\x0a\x6b\xb2\x9d\x49\xb8\xb4\x4d\xa8\x46\x69\xe1\xbd\x59\x71\xae\xca\x1d\xaa\xa2\x74\x7e\xb5\xbc\x5d\xde\xf2\x14\xae\x87\x68\xd7\x90\xf2\xe6\xb5\xe5\x4d\xd5\xf2\xa6\x6e\xd9\x65\xeb\xff\x7e\xd8\x3c\xc0\xfd\xf7\x04\x1a\x8d\xd5\xf7\xb2\xd4\x2b\x98\xcd\xda\xf1\x69\x8e\x2e\x00\x43\x21\x1e\xcb\x91\x46\x73\x6a\x84\x70\xe1\x79\x40\x0e\x07\x7a\x81\x0d\xfb\x88\xae\xe8\x19\xf0\xef\xa6\x2f\xde\x5b\xb7\xb0\xb8\xa4\x8c\xc7\xdf\xe9\x6f\x00\x00\x00\xff\xff\x71\x88\xd5\xa3\x56\x03\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 854, mode: os.FileMode(420), modTime: time.Unix(1594846095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
